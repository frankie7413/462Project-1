{
  "author": {
    "name": "T. Budiman",
    "email": "tbudiman@gmail.com"
  },
  "name": "ipident",
  "description": "Node.js library to identify the location of IP addresses using redis.",
  "version": "0.0.7",
  "repository": {
    "type": "git",
    "url": "http://github.com/Webizly/geoip.git"
  },
  "main": "./index.js",
  "dependencies": {
    "csv": "*",
    "redis": "~0.8.2",
    "underscore.string": "*",
    "async": "*",
    "inet": "*",
    "hiredis": "*"
  },
  "devDependencies": {
    "should": "*"
  },
  "optionalDependencies": {
    "hiredis": "*"
  },
  "engines": {
    "node": "*"
  },
  "readme": "ipident - IP identification lookup using redis\n==============================================\n\nThis module provides a simple Node.js API interface to identify city information from a given IP Address.\nThe module will setup a redis data store and load the IP lookup data there.\n\nInstallation\n------------\n\nYou have to install redis and node.js in order to use this module.\n\nInstall with:\n\n```sh\n$ npm install ipident\n```\n\nOr get it from the source: [ipident]\n\nThe IP lookup data is available at [geolite]. Download the GeoLite City data in CSV format.\nExtract them into `node_modules/ipident/data/` directory. Note that there should be 2 files:\n\n```\nnode_modules/ipident/data/GeoLiteCity-Blocks.csv\nnode_modules/ipident/data/GeoLiteCity-Location.csv\n```\n\nUsage\n-----\n\n```javascript\nvar ipident = require('ipident');\n\nfunction doLookup() {\n    ipident.retrieveCityInfo('125.163.49.39', function (data) {\n        console.log(data);\n    });\n}\n\n// loads data into redis\nipident.autoLoad(doLookup);\n\n```\n\nAPI\n---\n\n### loadData(callback)\n\nRead the data from csv file and load them to redis data store. This application only use 1 key, `ipident:ipaddress`.\nUsually this function isn't used directly, use `autoLoad` instead.\n\n### autoLoad(callback)\n\nCheck the data in redis and load them if necessary. This function is used in starting up the application to ensure the data is ready.\n\n```javascript\nvar ipident = require('ipident');\n\nipident.autoLoad();\n```\n\n### retrieveCityInfo(ip_address, callback(data))\n\nThis is the main function to lookup city information. The returned data is an object with the following fields:\n * city_name\n * region_name\n * country_code\n * postal_code\n * latitude\n * longitude\n * metro_code\n * area_code\n\n### clearData(callback)\n\nDeletes all data from redis\n\n### countData(callback)\n\nCount all data from redis\n\nSample Web Application using `ipident`\n--------------------------------------\n\nSample of usage inside a web application using express framework. The web application will prepare the data and load it to redis. On browser request, the remote ip of the requester will be identified, and by using `ipident.retrieveCityInfo` it will find the city and displays it in the browser.\n\nInstall express\n```sh\n$ npm install express\n```\n\nserver.js:\n\n```javascript\nvar express = require('express'),\n    ipident = require('ipident');\nvar app = express();\n\nipident.autoLoad();\n\napp.get('/', function(req, res) {\n    var body = 'IP Address: ' + req.ip + \"\\n\",\n        start = process.hrtime();\n\n    ipident.retrieveCityInfo(req.ip, function (data) {\n\n        if (data) {\n            var city_info, diff;\n\n            city_info = \"City: \" + data.city_name + \"\\n\";\n            city_info += \"Region Name: \" + data.region_name + \"\\n\";\n            city_info += \"Country: \" + data.country_code + \"\\n\";\n            city_info += \"Postal Code: \" + data.postal_code + \"\\n\";\n            city_info += \"Latitude: \" + data.latitude + \"\\n\";\n            city_info += \"Longitude: \" + data.longitude + \"\\n\";\n            city_info += \"Metro Code: \" + data.metro_code + \"\\n\";\n            city_info += \"Area Code: \" + data.area_code + \"\\n\";\n            body += city_info;\n            diff = process.hrtime(start);\n            body += \"\\n\\nIdentification process took \" +\n                (diff[0] * 1e9 + diff[1]).toString() +\n                \" nanoseconds\\n\";\n            res.setHeader('Content-Type', 'text/plain');\n            res.setHeader('Content-Length', body.length);\n            res.end(body);\n        } else {\n            body += \"No location identified for your IP Address.\\n\";\n            res.setHeader('Content-Type', 'text/plain');\n            res.setHeader('Content-Length', body.length);\n            res.end(body);\n        }\n    });\n});\n\napp.get(/\\/ipv4\\/(\\d+\\.\\d+\\.\\d+\\.\\d+)/, function(req, res) {\n    var given_ip = req.params[0];\n    var start = process.hrtime();\n    var body = 'Lookup IP Address: ' + given_ip + \"\\n\";\n    ipident.retrieveCityInfo(given_ip, function (data) {\n\n        if (data) {\n            var city_info, diff;\n\n            city_info = \"City: \" + data.city_name + \"\\n\";\n            city_info += \"Region Name: \" + data.region_name + \"\\n\";\n            city_info += \"Country: \" + data.country_code + \"\\n\";\n            city_info += \"Postal Code: \" + data.postal_code + \"\\n\";\n            city_info += \"Latitude: \" + data.latitude + \"\\n\";\n            city_info += \"Longitude: \" + data.longitude + \"\\n\";\n            city_info += \"Metro Code: \" + data.metro_code + \"\\n\";\n            city_info += \"Area Code: \" + data.area_code + \"\\n\";\n            body += city_info;\n            diff = process.hrtime(start);\n            body += \"\\n\\nIdentification process took \" +\n                (diff[0] * 1e9 + diff[1]).toString() +\n                \" nanoseconds\\n\";\n            res.setHeader('Content-Type', 'text/plain');\n            res.setHeader('Content-Length', body.length);\n            res.end(body);\n        } else {\n            body += \"No location identified for your IP Address.\\n\";\n            res.setHeader('Content-Type', 'text/plain');\n            res.setHeader('Content-Length', body.length);\n            res.end(body);\n        }\n    });\n\n});\n\napp.listen(3001);\nconsole.log('Listening on port 3001');\n\n```\n\n  [ipident]: https://github.com/Webizly/geoip/\n  [geolite]: http://dev.maxmind.com/geoip/geolite\n",
  "readmeFilename": "README.md",
  "_id": "ipident@0.0.7",
  "dist": {
    "shasum": "f6e6bde285cd9c7086e8268c28ac75f7a2c5e9f0",
    "tarball": "http://registry.npmjs.org/ipident/-/ipident-0.0.7.tgz"
  },
  "_from": "ipident@*",
  "_npmVersion": "1.2.18",
  "_npmUser": {
    "name": "tbudiman",
    "email": "tbudiman@gmail.com"
  },
  "maintainers": [
    {
      "name": "tbudiman",
      "email": "tbudiman@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "f6e6bde285cd9c7086e8268c28ac75f7a2c5e9f0",
  "_resolved": "https://registry.npmjs.org/ipident/-/ipident-0.0.7.tgz"
}
